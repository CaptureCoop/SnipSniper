import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    kotlin("jvm") version "1.5.31"
    //id("org.ajoberstar.grgit") version "5.0.0"
    id("application")
}

group = "net.snipsniper"

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(kotlin("test"))
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("com.1stleg:jnativehook:2.1.0")
    implementation("org.apache.commons:commons-lang3:3.12.0")
    implementation("org.apache.commons:commons-text:1.9")
    implementation("org.json:json:20211205")
    implementation("com.formdev:flatlaf:1.6")
    implementation("com.erigir:mslinks:0.0.2+5")

    implementation("org.capturecoop:CCUtils:1.9.4")
    implementation("org.capturecoop:CCLogger:1.6.2")
    implementation("org.capturecoop:CCColorUtils:1.0.3")
}

fun refreshWiki() {
    val workingDir = "src//main//resources//net//snipsniper//resources//wiki//"
    exec {
        workingDir(workingDir)
        commandLine( "git", "checkout", "master")
    }
    exec {
        workingDir(workingDir)
        commandLine("git", "submodule", "update")
    }
    exec {
        workingDir(workingDir)
        commandLine("git", "pull")
    }
}

tasks.register("precum") {
    refreshWiki()

    var type = System.getProperty("type")
    if(type == null) type = "dev"

    /*val grgit = Grgit.open(mapOf("currentDir" to project.rootDir))
    if(!grgit.status().clean && System.getenv("GITHUB_RUN_NUMBER") == null)
        type = "dirty"

    String projectVersion = new File("version.txt").text

    File f = new File(rootProject.projectDir.getAbsolutePath() + "//src//main//resources//net//snipsniper//resources//cfg//buildinfo.cfg")
    f.createNewFile()
    f.write("# This file is generated by gradle upon build")
    f.append("\ntype=" + type)
    f.append("\nversion=" + projectVersion)
    f.append("\nbuilddate=" + new Date().format('dd-MM-yyyy HH:mm:ss') + " (" + TimeZone.default.getID() + ")")
    f.append("\ngithash=" + grgit.head().abbreviatedId)*/
}

tasks.test {
    useJUnit()
}

tasks.withType<KotlinCompile> {
    kotlinOptions.jvmTarget = "1.8"
}

tasks.withType<Jar> {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes["Main-Class"] = "net.snipsniper.Main"
    }

    dependsOn(configurations.runtimeClasspath)
    from({
        sourceSets.main.get().output
        configurations.runtimeClasspath.get().filter { it.name.endsWith("jar") }.map { zipTree(it) }
    })
}

application {
    mainClass.set("net.snipsniper.Main")
}