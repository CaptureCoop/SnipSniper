import org.gradle.internal.os.OperatingSystem
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import java.util.TimeZone
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.io.BufferedReader
import java.io.InputStreamReader

plugins {
    kotlin("jvm") version "1.5.31"
    id("org.ajoberstar.grgit") version "4.1.1"
    id("application")
}

tasks.test {
    useJUnit()
}

tasks.withType<KotlinCompile> {
    kotlinOptions.jvmTarget = "1.8"
}

val ssMain = "net.snipsniper.MainKt"
group = "net.snipsniper"

application { mainClass.set(ssMain) }

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(kotlin("test"))
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("com.1stleg:jnativehook:2.1.0")
    implementation("org.apache.commons:commons-lang3:3.12.0")
    implementation("org.apache.commons:commons-text:1.9")
    implementation("org.json:json:20220320")
    implementation("com.formdev:flatlaf:1.6")
    implementation("com.erigir:mslinks:0.0.2+5")

    implementation("org.capturecoop:CCUtils:1.9.4")
    implementation("org.capturecoop:CCLogger:1.6.2")
    implementation("org.capturecoop:CCColorUtils:1.0.3")
}

fun refreshWiki() {
    fun d(vararg commands: String) {
        exec {
            workingDir("src/main/resources/net/snipsniper/resources/wiki/")
            commandLine(*commands)
        }
    }
    d("git", "checkout", "master")
    d("git", "submodule", "update")
    d("git", "pull")
}

fun prepare() {
    refreshWiki()

    var type = System.getProperty("type") ?: "dev"
    if(!grgit.status().isClean && System.getenv("GITHUB_RUN_NUMBER") == null)
        type = "dirty"

    if(type != "stable" || type != "release") {
        sourceSets.getByName("main") {
            resources.srcDir("src/main/resources-dev")
        }
    }

    val projectVersion = File("version.txt").readLines()[0]
    val buildDate = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss"))
    val buildInfo = """
        # This file is generated by gradle upon build
        type=$type
        version=$projectVersion
        builddate=$buildDate (${TimeZone.getDefault().id})
        githash=${grgit.head().abbreviatedId}
        githashfull=${grgit.head().id}
        branch=${grgit.branch.current().name}
        osname=${System.getProperty("os.name")}
        osversion=${getSystemVersion()}
        osarch=${System.getProperty("os.arch")}
        javavendor=${System.getProperty("java.vendor")}
        javaver=${System.getProperty("java.version")}
    """.trimIndent()

    val f = File(rootProject.projectDir.absolutePath, "//src//main//resources//net//snipsniper//resources//cfg//buildinfo.cfg")
    if(f.exists()) f.delete()
    f.createNewFile()
    f.writeText(buildInfo)
}

fun getSystemVersion(): String {
    if(!OperatingSystem.current().isWindows) return System.getProperty("os.version")
    Runtime.getRuntime().exec("cmd.exe /c ver").also {
        BufferedReader(InputStreamReader(it.inputStream)).also { reader ->
            var output = ""
            reader.readLines().forEach {l -> if(l.isNotEmpty()) output += l}
            return Regex("(?<=\\[)(.*?)(?=\\])").find(output)?.value?.toLowerCase()?.replace("version ", "") ?: output
        }
    }
}

tasks.withType<Jar> {
    prepare()
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest { attributes["Main-Class"] = ssMain }
    dependsOn(configurations.runtimeClasspath)
    from({
        sourceSets.main.get().output
        configurations.runtimeClasspath.get().filter { it.name.endsWith("jar") }.map { zipTree(it) }
    })
}