plugins {
    id 'java'
    id 'application'
    id 'org.ajoberstar.grgit' version '4.1.0'
}

application {
    mainClassName = "org.snipsniper.Main"
}

group 'org.snipsniper'

compileJava.options.encoding = 'UTF-8'

String projectVersion = "3.6.0"
String projectBuild = "20210903.1"

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    compile 'com.1stleg:jnativehook:2.1.0'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'org.json:json:20201115'
    compile 'com.formdev:flatlaf:1.2'
}

task preBuild {
    String type = System.getProperty("type")
    if(type == null) type = "dev"

    if(!grgit.status().clean && System.getenv("GITHUB_RUN_NUMBER") == null)
        type = "dirty"

    File f = new File(rootProject.projectDir.getAbsolutePath() + "//src//main//resources//org//snipsniper//resources//cfg//buildinfo.cfg")
    f.createNewFile()
    f.write("# This file is generated by gradle upon build")
    f.append("\ntype=" + type)
    f.append("\nversion=" + projectVersion)
    f.append("\nbuild=" + projectBuild)
    f.append("\nbuilddate=" + new Date().format('dd-MM-yyyy HH:mm:ss') + " (" + TimeZone.default.getID() + ")")
    f.append("\ngithash=" + grgit.head().abbreviatedId)

    new File(rootProject.projectDir.getAbsolutePath() + "//build//").mkdirs()
    File versionFile = new File(rootProject.projectDir.getAbsolutePath() + "//build//SSVersion.txt")
    versionFile.createNewFile()
    versionFile.write(projectVersion)
}
build.dependsOn preBuild

jar {
    manifest {
        attributes(
                'Main-Class': 'org.snipsniper.Main'
        )
    }
    //https://stackoverflow.com/questions/52816630/unable-to-create-a-jar-of-my-jda-project-because-of-pom-dependency

    from {
        "src//main//resources//org//snipsniper//resources//cfg//buildinfo.cfg"
        configurations
                .compile
                .findAll { !it.name.endsWith('pom') }
                .collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test {
    useJUnitPlatform()
}