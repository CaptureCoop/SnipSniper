plugins {
    id 'java'
    id 'application'
    id 'org.ajoberstar.grgit' version '4.1.1'
}

application {
    getMainClass().set("net.snipsniper.Main")
}

group 'net.snipsniper'

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

    implementation 'com.1stleg:jnativehook:2.1.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.commons:commons-text:1.9'
    implementation 'org.json:json:20211205'
    implementation 'com.formdev:flatlaf:2.0.1'
    implementation 'com.erigir:mslinks:0.0.2+5'

    implementation 'org.capturecoop:CCUtils:1.9.4'
    implementation 'org.capturecoop:CCLogger:1.6.2'
    implementation 'org.capturecoop:CCColorUtils:1.0.2'
}

void refreshWiki() {
    exec {
        workingDir 'src//main//resources//net//snipsniper//resources//wiki//'
        commandLine 'git', 'checkout', 'master'
    }
    exec {
        workingDir 'src//main//resources//net//snipsniper//resources//wiki//'
        commandLine 'git', 'submodule', 'update'
    }
    exec {
        workingDir 'src//main//resources//net//snipsniper//resources//wiki//'
        commandLine 'git', 'pull'
    }
}

task preBuild {
    refreshWiki()

    String type = System.getProperty("type")
    if(type == null) type = "dev"

    if(!grgit.status().clean && System.getenv("GITHUB_RUN_NUMBER") == null)
        type = "dirty"

    String projectVersion = new File("version.txt").text

    File f = new File(rootProject.projectDir.getAbsolutePath() + "//src//main//resources//net//snipsniper//resources//cfg//buildinfo.cfg")
    f.createNewFile()
    f.write("# This file is generated by gradle upon build")
    f.append("\ntype=" + type)
    f.append("\nversion=" + projectVersion)
    f.append("\nbuilddate=" + new Date().format('dd-MM-yyyy HH:mm:ss') + " (" + TimeZone.default.getID() + ")")
    f.append("\ngithash=" + grgit.head().abbreviatedId)
}
build.dependsOn preBuild

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
                'Main-Class': 'net.snipsniper.Main'
        )
    }
    //https://stackoverflow.com/questions/52816630/unable-to-create-a-jar-of-my-jda-project-because-of-pom-dependency

    from {
        "src//main//resources//net//snipsniper//resources//cfg//buildinfo.cfg"
        configurations
                .runtimeClasspath
                .findAll { !it.name.endsWith('pom') }
                .collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test {
    useJUnitPlatform()
}